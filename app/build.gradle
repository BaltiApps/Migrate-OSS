apply plugin: 'com.android.application'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

//*********** UPDATE IN RELEASES ***********
def versionMajor = 6
def versionMinor = 0
def versionPatch = 0

// NO BLANK SPACE
def versionCodename = "Artemis"
def releaseState = "beta"

def lastTestedAndroidLabel = "Android 12"
def lastTestedAndroidAPI = 32
//*********** UPDATE IN RELEASES ***********

// NO BLANK SPACE as it will be used in updater script.
def shortVersionName = "${versionMajor}.${versionMinor}.${versionPatch}"

android {
    compileSdk 33

    defaultConfig {
        applicationId "balti.migrate"
        minSdk 21
        targetSdk 32
        versionCode versionMajor * 100 + versionMinor * 10 + versionPatch
        versionName "$versionCodename (v$shortVersionName) [$releaseState]"

        // Version
        buildConfigField "String", "SHORT_VERSION_NAME", "\"${shortVersionName}\""
        resValue "string", "short_version_name", "\"${shortVersionName}\""
        buildConfigField "String", "VERSION_CODENAME", "\"${versionCodename}\""
        resValue "string", "version_codename", "\"${versionCodename}\""

        // release state
        buildConfigField "String", "RELEASE_STATE", "\"${releaseState}\""
        resValue "string", "release_state", "\"${releaseState}\""

        // last tested android
        buildConfigField "String", "LAST_TESTED_ANDROID_LABEL", "\"${lastTestedAndroidLabel}\""
        buildConfigField "int", "LAST_TESTED_ANDROID_API", "$lastTestedAndroidAPI"

        // generate provider authority string
        def contentProviderAuthority = applicationId + ".provider"

        // Creates a placeholder property to use in the manifest.
        // This will replace "${cpAuthority}" string in AndroidManifest.xml
        manifestPlaceholders = [cpAuthority: contentProviderAuthority]

        // Adds a new field for the authority to the BuildConfig class.
        buildConfigField("String", "CONTENT_PROVIDER_AUTHORITY", "\"${contentProviderAuthority}\"")
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = "Migrate-${shortVersionName}-${variant.flavorName}-${variant.buildType.name}.apk"
        }
    }

    flavorDimensions.add("distribution")

    productFlavors {
        GPE {
            dimension "distribution"
            resValue "string", "app_name", "Migrate-GPE"
            resValue "string", "distribution_label", "Google Play Edition"
        }
        NG {
            dimension "distribution"
            resValue "string", "app_name", "Migrate-NG"
            resValue "string", "distribution_label", "Non-Google Edition"
            applicationIdSuffix ".ng"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    def lifecycle_version = '2.5.1'
    implementation "androidx.lifecycle:lifecycle-service:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"

    implementation 'org.apache.commons:commons-collections4:4.4'


    implementation fileTree(dir: 'libs', include: ['*.aar'])
    implementation files('libs/FileX-release.aar')
    implementation files('libs/baltitoolbox-release.aar')

}
repositories {
    mavenCentral()
}